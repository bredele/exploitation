/**
 * Dependencies
 */

var edge = require('short-edge')
var euclidean = require('euclidean')


/**
 * Pseudo random propertional rule.
 *
 * @param {Number} index
 * @param {Object} ants
 * @param {Object} pheromones
 * @param {Number} beta
 * @param {Function} distance
 * @return {Function}
 */

module.exports = function(index, ants, beta = 2, distance = euclidean) {

  var cache

  /**
   * Exploitation of transition rule driven by the importance
   * of pheromones over exploration.
   *
   * @param {Objects} pheromones
   * @param {Function?} cb
   * @return {Number}
   * @api public
   */

  return function(pheromones, cb) {
    cache = cache || transitions(index, ants, pheromones, beta, distance)
    let id
    if(Math.random() > 0.9) id = exploration(cache)
    else id = Math.max(...cache)
    // remove from remaining transitions
    cache[id] = 0
    return id
  }
}


/**
 * Exploration of transition rule as used in
 * Ant system.
 *
 * @param {Array} arr
 * @return {Number}
 * @api private
 */

function exploration(arr) {
  let total = arr.reduce((a, b) => a + b, 0)
  return Math.max(...arr.map(val => val / total))
}


/**
 * Calculate transitions towards nodes connected by short edges
 * and with a large amount of pheromone
 *
 * @param {Number} index
 * @param {Array} ants
 * @param {Object} pheromones
 * @param {Number} beta
 * @param {Function} distance
 * @return {Array}
 * @api private
 */

function transitions(index, ants, pheromones, beta, distance) {
  // not map
  return ants.map((ant, idx) => {
    
  })
}
